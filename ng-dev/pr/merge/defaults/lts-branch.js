"use strict";
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.assertActiveLtsBranch = void 0;
const semver = require("semver");
const versioning_1 = require("../../../release/versioning");
const console_1 = require("../../../utils/console");
const target_label_1 = require("../target-label");
/**
 * Asserts that the given branch corresponds to an active LTS version-branch that can receive
 * backport fixes. Throws an error if LTS expired or an invalid branch is selected.
 *
 * @param repo Repository containing the given branch. Used for Github API queries.
 * @param releaseConfig Configuration for releases. Used to query NPM about past publishes.
 * @param branchName Branch that is checked to be an active LTS version-branch.
 * */
async function assertActiveLtsBranch(repo, releaseConfig, branchName) {
    const version = await versioning_1.getVersionOfBranch(repo, branchName);
    const { 'dist-tags': distTags, time } = await versioning_1.fetchProjectNpmPackageInfo(releaseConfig);
    // LTS versions should be tagged in NPM in the following format: `v{major}-lts`.
    const ltsNpmTag = versioning_1.getLtsNpmDistTagOfMajor(version.major);
    const ltsVersion = semver.parse(distTags[ltsNpmTag]);
    // Ensure that there is an LTS version tagged for the given version-branch major. e.g.
    // if the version branch is `9.2.x` then we want to make sure that there is an LTS
    // version tagged in NPM for `v9`, following the `v{major}-lts` tag convention.
    if (ltsVersion === null) {
        throw new target_label_1.InvalidTargetBranchError(`No LTS version tagged for v${version.major} in NPM.`);
    }
    // Ensure that the correct branch is used for the LTS version. We do not want to merge
    // changes to older minor version branches that do not reflect the current LTS version.
    if (branchName !== `${ltsVersion.major}.${ltsVersion.minor}.x`) {
        throw new target_label_1.InvalidTargetBranchError(`Not using last-minor branch for v${version.major} LTS version. PR ` +
            `should be updated to target: ${ltsVersion.major}.${ltsVersion.minor}.x`);
    }
    const today = new Date();
    const majorReleaseDate = new Date(time[`${version.major}.0.0`]);
    const ltsEndDate = versioning_1.computeLtsEndDateOfMajor(majorReleaseDate);
    // Check if LTS has already expired for the targeted major version. If so, we do not
    // allow the merge as per our LTS guarantees. Can be forcibly overridden if desired.
    // See: https://angular.io/guide/releases#support-policy-and-schedule.
    if (today > ltsEndDate) {
        const ltsEndDateText = ltsEndDate.toLocaleDateString('en-US');
        console_1.warn(console_1.red(`Long-term support ended for v${version.major} on ${ltsEndDateText}.`));
        console_1.warn(console_1.yellow(`Merging of pull requests for this major is generally not ` +
            `desired, but can be forcibly ignored.`));
        if (await console_1.promptConfirm('Do you want to forcibly proceed with merging?')) {
            return;
        }
        throw new target_label_1.InvalidTargetBranchError(`Long-term supported ended for v${version.major} on ${ltsEndDateText}. ` +
            `Pull request cannot be merged into the ${branchName} branch.`);
    }
}
exports.assertActiveLtsBranch = assertActiveLtsBranch;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibHRzLWJyYW5jaC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL25nLWRldi9wci9tZXJnZS9kZWZhdWx0cy9sdHMtYnJhbmNoLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7O0dBTUc7OztBQUVILGlDQUFpQztBQUdqQyw0REFNcUM7QUFDckMsb0RBQXdFO0FBQ3hFLGtEQUF5RDtBQUV6RDs7Ozs7OztLQU9LO0FBQ0UsS0FBSyxVQUFVLHFCQUFxQixDQUN6QyxJQUF1QixFQUN2QixhQUE0QixFQUM1QixVQUFrQjtJQUVsQixNQUFNLE9BQU8sR0FBRyxNQUFNLCtCQUFrQixDQUFDLElBQUksRUFBRSxVQUFVLENBQUMsQ0FBQztJQUMzRCxNQUFNLEVBQUMsV0FBVyxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUMsR0FBRyxNQUFNLHVDQUEwQixDQUFDLGFBQWEsQ0FBQyxDQUFDO0lBRXRGLGdGQUFnRjtJQUNoRixNQUFNLFNBQVMsR0FBRyxvQ0FBdUIsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDekQsTUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQztJQUVyRCxzRkFBc0Y7SUFDdEYsa0ZBQWtGO0lBQ2xGLCtFQUErRTtJQUMvRSxJQUFJLFVBQVUsS0FBSyxJQUFJLEVBQUU7UUFDdkIsTUFBTSxJQUFJLHVDQUF3QixDQUFDLDhCQUE4QixPQUFPLENBQUMsS0FBSyxVQUFVLENBQUMsQ0FBQztLQUMzRjtJQUVELHNGQUFzRjtJQUN0Rix1RkFBdUY7SUFDdkYsSUFBSSxVQUFVLEtBQUssR0FBRyxVQUFVLENBQUMsS0FBSyxJQUFJLFVBQVUsQ0FBQyxLQUFLLElBQUksRUFBRTtRQUM5RCxNQUFNLElBQUksdUNBQXdCLENBQ2hDLG9DQUFvQyxPQUFPLENBQUMsS0FBSyxtQkFBbUI7WUFDbEUsZ0NBQWdDLFVBQVUsQ0FBQyxLQUFLLElBQUksVUFBVSxDQUFDLEtBQUssSUFBSSxDQUMzRSxDQUFDO0tBQ0g7SUFFRCxNQUFNLEtBQUssR0FBRyxJQUFJLElBQUksRUFBRSxDQUFDO0lBQ3pCLE1BQU0sZ0JBQWdCLEdBQUcsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsT0FBTyxDQUFDLEtBQUssTUFBTSxDQUFDLENBQUMsQ0FBQztJQUNoRSxNQUFNLFVBQVUsR0FBRyxxQ0FBd0IsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0lBRTlELG9GQUFvRjtJQUNwRixvRkFBb0Y7SUFDcEYsc0VBQXNFO0lBQ3RFLElBQUksS0FBSyxHQUFHLFVBQVUsRUFBRTtRQUN0QixNQUFNLGNBQWMsR0FBRyxVQUFVLENBQUMsa0JBQWtCLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDOUQsY0FBSSxDQUFDLGFBQUcsQ0FBQyxnQ0FBZ0MsT0FBTyxDQUFDLEtBQUssT0FBTyxjQUFjLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDakYsY0FBSSxDQUNGLGdCQUFNLENBQ0osMkRBQTJEO1lBQ3pELHVDQUF1QyxDQUMxQyxDQUNGLENBQUM7UUFDRixJQUFJLE1BQU0sdUJBQWEsQ0FBQywrQ0FBK0MsQ0FBQyxFQUFFO1lBQ3hFLE9BQU87U0FDUjtRQUNELE1BQU0sSUFBSSx1Q0FBd0IsQ0FDaEMsa0NBQWtDLE9BQU8sQ0FBQyxLQUFLLE9BQU8sY0FBYyxJQUFJO1lBQ3RFLDBDQUEwQyxVQUFVLFVBQVUsQ0FDakUsQ0FBQztLQUNIO0FBQ0gsQ0FBQztBQXBERCxzREFvREMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIExMQyBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cblxuaW1wb3J0ICogYXMgc2VtdmVyIGZyb20gJ3NlbXZlcic7XG5cbmltcG9ydCB7UmVsZWFzZUNvbmZpZ30gZnJvbSAnLi4vLi4vLi4vcmVsZWFzZS9jb25maWcvaW5kZXgnO1xuaW1wb3J0IHtcbiAgY29tcHV0ZUx0c0VuZERhdGVPZk1ham9yLFxuICBmZXRjaFByb2plY3ROcG1QYWNrYWdlSW5mbyxcbiAgZ2V0THRzTnBtRGlzdFRhZ09mTWFqb3IsXG4gIGdldFZlcnNpb25PZkJyYW5jaCxcbiAgR2l0aHViUmVwb1dpdGhBcGksXG59IGZyb20gJy4uLy4uLy4uL3JlbGVhc2UvdmVyc2lvbmluZyc7XG5pbXBvcnQge3Byb21wdENvbmZpcm0sIHJlZCwgd2FybiwgeWVsbG93fSBmcm9tICcuLi8uLi8uLi91dGlscy9jb25zb2xlJztcbmltcG9ydCB7SW52YWxpZFRhcmdldEJyYW5jaEVycm9yfSBmcm9tICcuLi90YXJnZXQtbGFiZWwnO1xuXG4vKipcbiAqIEFzc2VydHMgdGhhdCB0aGUgZ2l2ZW4gYnJhbmNoIGNvcnJlc3BvbmRzIHRvIGFuIGFjdGl2ZSBMVFMgdmVyc2lvbi1icmFuY2ggdGhhdCBjYW4gcmVjZWl2ZVxuICogYmFja3BvcnQgZml4ZXMuIFRocm93cyBhbiBlcnJvciBpZiBMVFMgZXhwaXJlZCBvciBhbiBpbnZhbGlkIGJyYW5jaCBpcyBzZWxlY3RlZC5cbiAqXG4gKiBAcGFyYW0gcmVwbyBSZXBvc2l0b3J5IGNvbnRhaW5pbmcgdGhlIGdpdmVuIGJyYW5jaC4gVXNlZCBmb3IgR2l0aHViIEFQSSBxdWVyaWVzLlxuICogQHBhcmFtIHJlbGVhc2VDb25maWcgQ29uZmlndXJhdGlvbiBmb3IgcmVsZWFzZXMuIFVzZWQgdG8gcXVlcnkgTlBNIGFib3V0IHBhc3QgcHVibGlzaGVzLlxuICogQHBhcmFtIGJyYW5jaE5hbWUgQnJhbmNoIHRoYXQgaXMgY2hlY2tlZCB0byBiZSBhbiBhY3RpdmUgTFRTIHZlcnNpb24tYnJhbmNoLlxuICogKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBhc3NlcnRBY3RpdmVMdHNCcmFuY2goXG4gIHJlcG86IEdpdGh1YlJlcG9XaXRoQXBpLFxuICByZWxlYXNlQ29uZmlnOiBSZWxlYXNlQ29uZmlnLFxuICBicmFuY2hOYW1lOiBzdHJpbmcsXG4pIHtcbiAgY29uc3QgdmVyc2lvbiA9IGF3YWl0IGdldFZlcnNpb25PZkJyYW5jaChyZXBvLCBicmFuY2hOYW1lKTtcbiAgY29uc3QgeydkaXN0LXRhZ3MnOiBkaXN0VGFncywgdGltZX0gPSBhd2FpdCBmZXRjaFByb2plY3ROcG1QYWNrYWdlSW5mbyhyZWxlYXNlQ29uZmlnKTtcblxuICAvLyBMVFMgdmVyc2lvbnMgc2hvdWxkIGJlIHRhZ2dlZCBpbiBOUE0gaW4gdGhlIGZvbGxvd2luZyBmb3JtYXQ6IGB2e21ham9yfS1sdHNgLlxuICBjb25zdCBsdHNOcG1UYWcgPSBnZXRMdHNOcG1EaXN0VGFnT2ZNYWpvcih2ZXJzaW9uLm1ham9yKTtcbiAgY29uc3QgbHRzVmVyc2lvbiA9IHNlbXZlci5wYXJzZShkaXN0VGFnc1tsdHNOcG1UYWddKTtcblxuICAvLyBFbnN1cmUgdGhhdCB0aGVyZSBpcyBhbiBMVFMgdmVyc2lvbiB0YWdnZWQgZm9yIHRoZSBnaXZlbiB2ZXJzaW9uLWJyYW5jaCBtYWpvci4gZS5nLlxuICAvLyBpZiB0aGUgdmVyc2lvbiBicmFuY2ggaXMgYDkuMi54YCB0aGVuIHdlIHdhbnQgdG8gbWFrZSBzdXJlIHRoYXQgdGhlcmUgaXMgYW4gTFRTXG4gIC8vIHZlcnNpb24gdGFnZ2VkIGluIE5QTSBmb3IgYHY5YCwgZm9sbG93aW5nIHRoZSBgdnttYWpvcn0tbHRzYCB0YWcgY29udmVudGlvbi5cbiAgaWYgKGx0c1ZlcnNpb24gPT09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgSW52YWxpZFRhcmdldEJyYW5jaEVycm9yKGBObyBMVFMgdmVyc2lvbiB0YWdnZWQgZm9yIHYke3ZlcnNpb24ubWFqb3J9IGluIE5QTS5gKTtcbiAgfVxuXG4gIC8vIEVuc3VyZSB0aGF0IHRoZSBjb3JyZWN0IGJyYW5jaCBpcyB1c2VkIGZvciB0aGUgTFRTIHZlcnNpb24uIFdlIGRvIG5vdCB3YW50IHRvIG1lcmdlXG4gIC8vIGNoYW5nZXMgdG8gb2xkZXIgbWlub3IgdmVyc2lvbiBicmFuY2hlcyB0aGF0IGRvIG5vdCByZWZsZWN0IHRoZSBjdXJyZW50IExUUyB2ZXJzaW9uLlxuICBpZiAoYnJhbmNoTmFtZSAhPT0gYCR7bHRzVmVyc2lvbi5tYWpvcn0uJHtsdHNWZXJzaW9uLm1pbm9yfS54YCkge1xuICAgIHRocm93IG5ldyBJbnZhbGlkVGFyZ2V0QnJhbmNoRXJyb3IoXG4gICAgICBgTm90IHVzaW5nIGxhc3QtbWlub3IgYnJhbmNoIGZvciB2JHt2ZXJzaW9uLm1ham9yfSBMVFMgdmVyc2lvbi4gUFIgYCArXG4gICAgICAgIGBzaG91bGQgYmUgdXBkYXRlZCB0byB0YXJnZXQ6ICR7bHRzVmVyc2lvbi5tYWpvcn0uJHtsdHNWZXJzaW9uLm1pbm9yfS54YCxcbiAgICApO1xuICB9XG5cbiAgY29uc3QgdG9kYXkgPSBuZXcgRGF0ZSgpO1xuICBjb25zdCBtYWpvclJlbGVhc2VEYXRlID0gbmV3IERhdGUodGltZVtgJHt2ZXJzaW9uLm1ham9yfS4wLjBgXSk7XG4gIGNvbnN0IGx0c0VuZERhdGUgPSBjb21wdXRlTHRzRW5kRGF0ZU9mTWFqb3IobWFqb3JSZWxlYXNlRGF0ZSk7XG5cbiAgLy8gQ2hlY2sgaWYgTFRTIGhhcyBhbHJlYWR5IGV4cGlyZWQgZm9yIHRoZSB0YXJnZXRlZCBtYWpvciB2ZXJzaW9uLiBJZiBzbywgd2UgZG8gbm90XG4gIC8vIGFsbG93IHRoZSBtZXJnZSBhcyBwZXIgb3VyIExUUyBndWFyYW50ZWVzLiBDYW4gYmUgZm9yY2libHkgb3ZlcnJpZGRlbiBpZiBkZXNpcmVkLlxuICAvLyBTZWU6IGh0dHBzOi8vYW5ndWxhci5pby9ndWlkZS9yZWxlYXNlcyNzdXBwb3J0LXBvbGljeS1hbmQtc2NoZWR1bGUuXG4gIGlmICh0b2RheSA+IGx0c0VuZERhdGUpIHtcbiAgICBjb25zdCBsdHNFbmREYXRlVGV4dCA9IGx0c0VuZERhdGUudG9Mb2NhbGVEYXRlU3RyaW5nKCdlbi1VUycpO1xuICAgIHdhcm4ocmVkKGBMb25nLXRlcm0gc3VwcG9ydCBlbmRlZCBmb3IgdiR7dmVyc2lvbi5tYWpvcn0gb24gJHtsdHNFbmREYXRlVGV4dH0uYCkpO1xuICAgIHdhcm4oXG4gICAgICB5ZWxsb3coXG4gICAgICAgIGBNZXJnaW5nIG9mIHB1bGwgcmVxdWVzdHMgZm9yIHRoaXMgbWFqb3IgaXMgZ2VuZXJhbGx5IG5vdCBgICtcbiAgICAgICAgICBgZGVzaXJlZCwgYnV0IGNhbiBiZSBmb3JjaWJseSBpZ25vcmVkLmAsXG4gICAgICApLFxuICAgICk7XG4gICAgaWYgKGF3YWl0IHByb21wdENvbmZpcm0oJ0RvIHlvdSB3YW50IHRvIGZvcmNpYmx5IHByb2NlZWQgd2l0aCBtZXJnaW5nPycpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRocm93IG5ldyBJbnZhbGlkVGFyZ2V0QnJhbmNoRXJyb3IoXG4gICAgICBgTG9uZy10ZXJtIHN1cHBvcnRlZCBlbmRlZCBmb3IgdiR7dmVyc2lvbi5tYWpvcn0gb24gJHtsdHNFbmREYXRlVGV4dH0uIGAgK1xuICAgICAgICBgUHVsbCByZXF1ZXN0IGNhbm5vdCBiZSBtZXJnZWQgaW50byB0aGUgJHticmFuY2hOYW1lfSBicmFuY2guYCxcbiAgICApO1xuICB9XG59XG4iXX0=