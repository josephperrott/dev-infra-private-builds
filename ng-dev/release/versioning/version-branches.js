"use strict";
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getBranchesForMajorVersions = exports.getVersionForVersionBranch = exports.isVersionBranch = exports.getVersionOfBranch = void 0;
const semver = require("semver");
/** Regular expression that matches version-branches. */
const versionBranchNameRegex = /^(\d+)\.(\d+)\.x$/;
/** Gets the version of a given branch by reading the `package.json` upstream. */
async function getVersionOfBranch(repo, branchName) {
    const { data } = await repo.api.repos.getContent({
        owner: repo.owner,
        repo: repo.name,
        path: '/package.json',
        ref: branchName,
    });
    // Workaround for: https://github.com/octokit/rest.js/issues/32.
    // TODO: Remove cast once types of Octokit `getContent` are fixed.
    const content = data.content;
    if (!content) {
        throw Error(`Unable to read "package.json" file from repository.`);
    }
    const { version } = JSON.parse(Buffer.from(content, 'base64').toString());
    const parsedVersion = semver.parse(version);
    if (parsedVersion === null) {
        throw Error(`Invalid version detected in following branch: ${branchName}.`);
    }
    return parsedVersion;
}
exports.getVersionOfBranch = getVersionOfBranch;
/** Whether the given branch corresponds to a version branch. */
function isVersionBranch(branchName) {
    return versionBranchNameRegex.test(branchName);
}
exports.isVersionBranch = isVersionBranch;
/**
 * Converts a given version-branch into a SemVer version that can be used with SemVer
 * utilities. e.g. to determine semantic order, extract major digit, compare.
 *
 * For example `10.0.x` will become `10.0.0` in SemVer. The patch digit is not
 * relevant but needed for parsing. SemVer does not allow `x` as patch digit.
 */
function getVersionForVersionBranch(branchName) {
    return semver.parse(branchName.replace(versionBranchNameRegex, '$1.$2.0'));
}
exports.getVersionForVersionBranch = getVersionForVersionBranch;
/**
 * Gets the version branches for the specified major versions in descending
 * order. i.e. latest version branches first.
 */
async function getBranchesForMajorVersions(repo, majorVersions) {
    const branchData = await repo.api.paginate(repo.api.repos.listBranches, {
        owner: repo.owner,
        repo: repo.name,
        protected: true,
    });
    const branches = [];
    for (const { name } of branchData) {
        if (!isVersionBranch(name)) {
            continue;
        }
        // Convert the version-branch into a SemVer version that can be used with the
        // SemVer utilities. e.g. to determine semantic order, compare versions.
        const parsed = getVersionForVersionBranch(name);
        // Collect all version-branches that match the specified major versions.
        if (parsed !== null && majorVersions.includes(parsed.major)) {
            branches.push({ name, parsed });
        }
    }
    // Sort captured version-branches in descending order.
    return branches.sort((a, b) => semver.rcompare(a.parsed, b.parsed));
}
exports.getBranchesForMajorVersions = getBranchesForMajorVersions;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmVyc2lvbi1icmFuY2hlcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL25nLWRldi9yZWxlYXNlL3ZlcnNpb25pbmcvdmVyc2lvbi1icmFuY2hlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7OztHQU1HOzs7QUFFSCxpQ0FBaUM7QUFxQmpDLHdEQUF3RDtBQUN4RCxNQUFNLHNCQUFzQixHQUFHLG1CQUFtQixDQUFDO0FBRW5ELGlGQUFpRjtBQUMxRSxLQUFLLFVBQVUsa0JBQWtCLENBQ3RDLElBQXVCLEVBQ3ZCLFVBQWtCO0lBRWxCLE1BQU0sRUFBQyxJQUFJLEVBQUMsR0FBRyxNQUFNLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQztRQUM3QyxLQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUs7UUFDakIsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJO1FBQ2YsSUFBSSxFQUFFLGVBQWU7UUFDckIsR0FBRyxFQUFFLFVBQVU7S0FDaEIsQ0FBQyxDQUFDO0lBQ0gsZ0VBQWdFO0lBQ2hFLGtFQUFrRTtJQUNsRSxNQUFNLE9BQU8sR0FBSSxJQUEyQixDQUFDLE9BQU8sQ0FBQztJQUNyRCxJQUFJLENBQUMsT0FBTyxFQUFFO1FBQ1osTUFBTSxLQUFLLENBQUMscURBQXFELENBQUMsQ0FBQztLQUNwRTtJQUNELE1BQU0sRUFBQyxPQUFPLEVBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLFFBQVEsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUdyRSxDQUFDO0lBQ0YsTUFBTSxhQUFhLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUM1QyxJQUFJLGFBQWEsS0FBSyxJQUFJLEVBQUU7UUFDMUIsTUFBTSxLQUFLLENBQUMsaURBQWlELFVBQVUsR0FBRyxDQUFDLENBQUM7S0FDN0U7SUFDRCxPQUFPLGFBQWEsQ0FBQztBQUN2QixDQUFDO0FBekJELGdEQXlCQztBQUVELGdFQUFnRTtBQUNoRSxTQUFnQixlQUFlLENBQUMsVUFBa0I7SUFDaEQsT0FBTyxzQkFBc0IsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7QUFDakQsQ0FBQztBQUZELDBDQUVDO0FBRUQ7Ozs7OztHQU1HO0FBQ0gsU0FBZ0IsMEJBQTBCLENBQUMsVUFBa0I7SUFDM0QsT0FBTyxNQUFNLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsc0JBQXNCLEVBQUUsU0FBUyxDQUFDLENBQUMsQ0FBQztBQUM3RSxDQUFDO0FBRkQsZ0VBRUM7QUFFRDs7O0dBR0c7QUFDSSxLQUFLLFVBQVUsMkJBQTJCLENBQy9DLElBQXVCLEVBQ3ZCLGFBQXVCO0lBRXZCLE1BQU0sVUFBVSxHQUFHLE1BQU0sSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsWUFBWSxFQUFFO1FBQ3RFLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSztRQUNqQixJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUk7UUFDZixTQUFTLEVBQUUsSUFBSTtLQUNoQixDQUFDLENBQUM7SUFDSCxNQUFNLFFBQVEsR0FBb0IsRUFBRSxDQUFDO0lBRXJDLEtBQUssTUFBTSxFQUFDLElBQUksRUFBQyxJQUFJLFVBQVUsRUFBRTtRQUMvQixJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQzFCLFNBQVM7U0FDVjtRQUNELDZFQUE2RTtRQUM3RSx3RUFBd0U7UUFDeEUsTUFBTSxNQUFNLEdBQUcsMEJBQTBCLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDaEQsd0VBQXdFO1FBQ3hFLElBQUksTUFBTSxLQUFLLElBQUksSUFBSSxhQUFhLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUMzRCxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUMsSUFBSSxFQUFFLE1BQU0sRUFBQyxDQUFDLENBQUM7U0FDL0I7S0FDRjtJQUVELHNEQUFzRDtJQUN0RCxPQUFPLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7QUFDdEUsQ0FBQztBQTFCRCxrRUEwQkMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIExMQyBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cblxuaW1wb3J0ICogYXMgc2VtdmVyIGZyb20gJ3NlbXZlcic7XG5pbXBvcnQge0dpdGh1YkNsaWVudCwgR2l0aHViUmVwb30gZnJvbSAnLi4vLi4vdXRpbHMvZ2l0L2dpdGh1Yic7XG5cbi8qKiBUeXBlIGRlc2NyaWJpbmcgYSBHaXRodWIgcmVwb3NpdG9yeSB3aXRoIGNvcnJlc3BvbmRpbmcgQVBJIGNsaWVudC4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgR2l0aHViUmVwb1dpdGhBcGkgZXh0ZW5kcyBHaXRodWJSZXBvIHtcbiAgLyoqIEFQSSBjbGllbnQgdGhhdCBjYW4gYWNjZXNzIHRoZSByZXBvc2l0b3J5LiAqL1xuICBhcGk6IEdpdGh1YkNsaWVudDtcbn1cblxuLyoqIFR5cGUgZGVzY3JpYmluZyBhIHZlcnNpb24tYnJhbmNoLiAqL1xuZXhwb3J0IGludGVyZmFjZSBWZXJzaW9uQnJhbmNoIHtcbiAgLyoqIE5hbWUgb2YgdGhlIGJyYW5jaCBpbiBHaXQuIGUuZy4gYDEwLjAueGAuICovXG4gIG5hbWU6IHN0cmluZztcbiAgLyoqXG4gICAqIFBhcnNlZCBTZW1WZXIgdmVyc2lvbiBmb3IgdGhlIHZlcnNpb24tYnJhbmNoLiBWZXJzaW9uIGJyYW5jaGVzIHRlY2huaWNhbGx5IGRvXG4gICAqIG5vdCBmb2xsb3cgdGhlIFNlbVZlciBmb3JtYXQsIGJ1dCB3ZSBjYW4gaGF2ZSByZXByZXNlbnRhdGl2ZSBTZW1WZXIgdmVyc2lvbnNcbiAgICogdGhhdCBjYW4gYmUgdXNlZCBmb3IgY29tcGFyaXNvbnMsIHNvcnRpbmcgYW5kIG90aGVyIGNoZWNrcy5cbiAgICovXG4gIHBhcnNlZDogc2VtdmVyLlNlbVZlcjtcbn1cblxuLyoqIFJlZ3VsYXIgZXhwcmVzc2lvbiB0aGF0IG1hdGNoZXMgdmVyc2lvbi1icmFuY2hlcy4gKi9cbmNvbnN0IHZlcnNpb25CcmFuY2hOYW1lUmVnZXggPSAvXihcXGQrKVxcLihcXGQrKVxcLngkLztcblxuLyoqIEdldHMgdGhlIHZlcnNpb24gb2YgYSBnaXZlbiBicmFuY2ggYnkgcmVhZGluZyB0aGUgYHBhY2thZ2UuanNvbmAgdXBzdHJlYW0uICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0VmVyc2lvbk9mQnJhbmNoKFxuICByZXBvOiBHaXRodWJSZXBvV2l0aEFwaSxcbiAgYnJhbmNoTmFtZTogc3RyaW5nLFxuKTogUHJvbWlzZTxzZW12ZXIuU2VtVmVyPiB7XG4gIGNvbnN0IHtkYXRhfSA9IGF3YWl0IHJlcG8uYXBpLnJlcG9zLmdldENvbnRlbnQoe1xuICAgIG93bmVyOiByZXBvLm93bmVyLFxuICAgIHJlcG86IHJlcG8ubmFtZSxcbiAgICBwYXRoOiAnL3BhY2thZ2UuanNvbicsXG4gICAgcmVmOiBicmFuY2hOYW1lLFxuICB9KTtcbiAgLy8gV29ya2Fyb3VuZCBmb3I6IGh0dHBzOi8vZ2l0aHViLmNvbS9vY3Rva2l0L3Jlc3QuanMvaXNzdWVzLzMyLlxuICAvLyBUT0RPOiBSZW1vdmUgY2FzdCBvbmNlIHR5cGVzIG9mIE9jdG9raXQgYGdldENvbnRlbnRgIGFyZSBmaXhlZC5cbiAgY29uc3QgY29udGVudCA9IChkYXRhIGFzIHtjb250ZW50Pzogc3RyaW5nfSkuY29udGVudDtcbiAgaWYgKCFjb250ZW50KSB7XG4gICAgdGhyb3cgRXJyb3IoYFVuYWJsZSB0byByZWFkIFwicGFja2FnZS5qc29uXCIgZmlsZSBmcm9tIHJlcG9zaXRvcnkuYCk7XG4gIH1cbiAgY29uc3Qge3ZlcnNpb259ID0gSlNPTi5wYXJzZShCdWZmZXIuZnJvbShjb250ZW50LCAnYmFzZTY0JykudG9TdHJpbmcoKSkgYXMge1xuICAgIHZlcnNpb246IHN0cmluZztcbiAgICBba2V5OiBzdHJpbmddOiBhbnk7XG4gIH07XG4gIGNvbnN0IHBhcnNlZFZlcnNpb24gPSBzZW12ZXIucGFyc2UodmVyc2lvbik7XG4gIGlmIChwYXJzZWRWZXJzaW9uID09PSBudWxsKSB7XG4gICAgdGhyb3cgRXJyb3IoYEludmFsaWQgdmVyc2lvbiBkZXRlY3RlZCBpbiBmb2xsb3dpbmcgYnJhbmNoOiAke2JyYW5jaE5hbWV9LmApO1xuICB9XG4gIHJldHVybiBwYXJzZWRWZXJzaW9uO1xufVxuXG4vKiogV2hldGhlciB0aGUgZ2l2ZW4gYnJhbmNoIGNvcnJlc3BvbmRzIHRvIGEgdmVyc2lvbiBicmFuY2guICovXG5leHBvcnQgZnVuY3Rpb24gaXNWZXJzaW9uQnJhbmNoKGJyYW5jaE5hbWU6IHN0cmluZyk6IGJvb2xlYW4ge1xuICByZXR1cm4gdmVyc2lvbkJyYW5jaE5hbWVSZWdleC50ZXN0KGJyYW5jaE5hbWUpO1xufVxuXG4vKipcbiAqIENvbnZlcnRzIGEgZ2l2ZW4gdmVyc2lvbi1icmFuY2ggaW50byBhIFNlbVZlciB2ZXJzaW9uIHRoYXQgY2FuIGJlIHVzZWQgd2l0aCBTZW1WZXJcbiAqIHV0aWxpdGllcy4gZS5nLiB0byBkZXRlcm1pbmUgc2VtYW50aWMgb3JkZXIsIGV4dHJhY3QgbWFqb3IgZGlnaXQsIGNvbXBhcmUuXG4gKlxuICogRm9yIGV4YW1wbGUgYDEwLjAueGAgd2lsbCBiZWNvbWUgYDEwLjAuMGAgaW4gU2VtVmVyLiBUaGUgcGF0Y2ggZGlnaXQgaXMgbm90XG4gKiByZWxldmFudCBidXQgbmVlZGVkIGZvciBwYXJzaW5nLiBTZW1WZXIgZG9lcyBub3QgYWxsb3cgYHhgIGFzIHBhdGNoIGRpZ2l0LlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0VmVyc2lvbkZvclZlcnNpb25CcmFuY2goYnJhbmNoTmFtZTogc3RyaW5nKTogc2VtdmVyLlNlbVZlciB8IG51bGwge1xuICByZXR1cm4gc2VtdmVyLnBhcnNlKGJyYW5jaE5hbWUucmVwbGFjZSh2ZXJzaW9uQnJhbmNoTmFtZVJlZ2V4LCAnJDEuJDIuMCcpKTtcbn1cblxuLyoqXG4gKiBHZXRzIHRoZSB2ZXJzaW9uIGJyYW5jaGVzIGZvciB0aGUgc3BlY2lmaWVkIG1ham9yIHZlcnNpb25zIGluIGRlc2NlbmRpbmdcbiAqIG9yZGVyLiBpLmUuIGxhdGVzdCB2ZXJzaW9uIGJyYW5jaGVzIGZpcnN0LlxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0QnJhbmNoZXNGb3JNYWpvclZlcnNpb25zKFxuICByZXBvOiBHaXRodWJSZXBvV2l0aEFwaSxcbiAgbWFqb3JWZXJzaW9uczogbnVtYmVyW10sXG4pOiBQcm9taXNlPFZlcnNpb25CcmFuY2hbXT4ge1xuICBjb25zdCBicmFuY2hEYXRhID0gYXdhaXQgcmVwby5hcGkucGFnaW5hdGUocmVwby5hcGkucmVwb3MubGlzdEJyYW5jaGVzLCB7XG4gICAgb3duZXI6IHJlcG8ub3duZXIsXG4gICAgcmVwbzogcmVwby5uYW1lLFxuICAgIHByb3RlY3RlZDogdHJ1ZSxcbiAgfSk7XG4gIGNvbnN0IGJyYW5jaGVzOiBWZXJzaW9uQnJhbmNoW10gPSBbXTtcblxuICBmb3IgKGNvbnN0IHtuYW1lfSBvZiBicmFuY2hEYXRhKSB7XG4gICAgaWYgKCFpc1ZlcnNpb25CcmFuY2gobmFtZSkpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICAvLyBDb252ZXJ0IHRoZSB2ZXJzaW9uLWJyYW5jaCBpbnRvIGEgU2VtVmVyIHZlcnNpb24gdGhhdCBjYW4gYmUgdXNlZCB3aXRoIHRoZVxuICAgIC8vIFNlbVZlciB1dGlsaXRpZXMuIGUuZy4gdG8gZGV0ZXJtaW5lIHNlbWFudGljIG9yZGVyLCBjb21wYXJlIHZlcnNpb25zLlxuICAgIGNvbnN0IHBhcnNlZCA9IGdldFZlcnNpb25Gb3JWZXJzaW9uQnJhbmNoKG5hbWUpO1xuICAgIC8vIENvbGxlY3QgYWxsIHZlcnNpb24tYnJhbmNoZXMgdGhhdCBtYXRjaCB0aGUgc3BlY2lmaWVkIG1ham9yIHZlcnNpb25zLlxuICAgIGlmIChwYXJzZWQgIT09IG51bGwgJiYgbWFqb3JWZXJzaW9ucy5pbmNsdWRlcyhwYXJzZWQubWFqb3IpKSB7XG4gICAgICBicmFuY2hlcy5wdXNoKHtuYW1lLCBwYXJzZWR9KTtcbiAgICB9XG4gIH1cblxuICAvLyBTb3J0IGNhcHR1cmVkIHZlcnNpb24tYnJhbmNoZXMgaW4gZGVzY2VuZGluZyBvcmRlci5cbiAgcmV0dXJuIGJyYW5jaGVzLnNvcnQoKGEsIGIpID0+IHNlbXZlci5yY29tcGFyZShhLnBhcnNlZCwgYi5wYXJzZWQpKTtcbn1cbiJdfQ==