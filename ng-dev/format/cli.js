"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildFormatParser = void 0;
const git_client_1 = require("../utils/git/git-client");
const format_1 = require("./format");
/** Build the parser for the format commands. */
function buildFormatParser(localYargs) {
    return localYargs
        .help()
        .strict()
        .demandCommand()
        .option('check', {
        type: 'boolean',
        default: process.env['CI'] ? true : false,
        description: 'Run the formatter to check formatting rather than updating code format',
    })
        .command('all', 'Run the formatter on all files in the repository', (args) => args, ({ check }) => {
        const executionCmd = check ? format_1.checkFiles : format_1.formatFiles;
        const allFiles = git_client_1.GitClient.get().allFiles();
        executionCmd(allFiles);
    })
        .command('changed [shaOrRef]', 'Run the formatter on files changed since the provided sha/ref', (args) => args.positional('shaOrRef', { type: 'string' }), ({ shaOrRef, check }) => {
        const sha = shaOrRef || 'master';
        const executionCmd = check ? format_1.checkFiles : format_1.formatFiles;
        const allChangedFilesSince = git_client_1.GitClient.get().allChangesFilesSince(sha);
        executionCmd(allChangedFilesSince);
    })
        .command('staged', 'Run the formatter on all staged files', (args) => args, ({ check }) => {
        const executionCmd = check ? format_1.checkFiles : format_1.formatFiles;
        const allStagedFiles = git_client_1.GitClient.get().allStagedFiles();
        executionCmd(allStagedFiles);
    })
        .command('files <files..>', 'Run the formatter on provided files', (args) => args.positional('files', { array: true, type: 'string' }), ({ check, files }) => {
        const executionCmd = check ? format_1.checkFiles : format_1.formatFiles;
        executionCmd(files);
    });
}
exports.buildFormatParser = buildFormatParser;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xpLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vbmctZGV2L2Zvcm1hdC9jbGkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBUUEsd0RBQWtEO0FBRWxELHFDQUFpRDtBQUVqRCxnREFBZ0Q7QUFDaEQsU0FBZ0IsaUJBQWlCLENBQUMsVUFBc0I7SUFDdEQsT0FBTyxVQUFVO1NBQ2QsSUFBSSxFQUFFO1NBQ04sTUFBTSxFQUFFO1NBQ1IsYUFBYSxFQUFFO1NBQ2YsTUFBTSxDQUFDLE9BQU8sRUFBRTtRQUNmLElBQUksRUFBRSxTQUFTO1FBQ2YsT0FBTyxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSztRQUN6QyxXQUFXLEVBQUUsd0VBQXdFO0tBQ3RGLENBQUM7U0FDRCxPQUFPLENBQ04sS0FBSyxFQUNMLGtEQUFrRCxFQUNsRCxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsSUFBSSxFQUNkLENBQUMsRUFBQyxLQUFLLEVBQUMsRUFBRSxFQUFFO1FBQ1YsTUFBTSxZQUFZLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxtQkFBVSxDQUFDLENBQUMsQ0FBQyxvQkFBVyxDQUFDO1FBQ3RELE1BQU0sUUFBUSxHQUFHLHNCQUFTLENBQUMsR0FBRyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDNUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ3pCLENBQUMsQ0FDRjtTQUNBLE9BQU8sQ0FDTixvQkFBb0IsRUFDcEIsK0RBQStELEVBQy9ELENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLFVBQVUsRUFBRSxFQUFDLElBQUksRUFBRSxRQUFRLEVBQUMsQ0FBQyxFQUN2RCxDQUFDLEVBQUMsUUFBUSxFQUFFLEtBQUssRUFBQyxFQUFFLEVBQUU7UUFDcEIsTUFBTSxHQUFHLEdBQUcsUUFBUSxJQUFJLFFBQVEsQ0FBQztRQUNqQyxNQUFNLFlBQVksR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLG1CQUFVLENBQUMsQ0FBQyxDQUFDLG9CQUFXLENBQUM7UUFDdEQsTUFBTSxvQkFBb0IsR0FBRyxzQkFBUyxDQUFDLEdBQUcsRUFBRSxDQUFDLG9CQUFvQixDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3ZFLFlBQVksQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO0lBQ3JDLENBQUMsQ0FDRjtTQUNBLE9BQU8sQ0FDTixRQUFRLEVBQ1IsdUNBQXVDLEVBQ3ZDLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxJQUFJLEVBQ2QsQ0FBQyxFQUFDLEtBQUssRUFBQyxFQUFFLEVBQUU7UUFDVixNQUFNLFlBQVksR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLG1CQUFVLENBQUMsQ0FBQyxDQUFDLG9CQUFXLENBQUM7UUFDdEQsTUFBTSxjQUFjLEdBQUcsc0JBQVMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxjQUFjLEVBQUUsQ0FBQztRQUN4RCxZQUFZLENBQUMsY0FBYyxDQUFDLENBQUM7SUFDL0IsQ0FBQyxDQUNGO1NBQ0EsT0FBTyxDQUNOLGlCQUFpQixFQUNqQixxQ0FBcUMsRUFDckMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxFQUFFLEVBQUMsS0FBSyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFDLENBQUMsRUFDakUsQ0FBQyxFQUFDLEtBQUssRUFBRSxLQUFLLEVBQUMsRUFBRSxFQUFFO1FBQ2pCLE1BQU0sWUFBWSxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsbUJBQVUsQ0FBQyxDQUFDLENBQUMsb0JBQVcsQ0FBQztRQUN0RCxZQUFZLENBQUMsS0FBTSxDQUFDLENBQUM7SUFDdkIsQ0FBQyxDQUNGLENBQUM7QUFDTixDQUFDO0FBbERELDhDQWtEQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgTExDIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuaW1wb3J0ICogYXMgeWFyZ3MgZnJvbSAneWFyZ3MnO1xuaW1wb3J0IHtHaXRDbGllbnR9IGZyb20gJy4uL3V0aWxzL2dpdC9naXQtY2xpZW50JztcblxuaW1wb3J0IHtjaGVja0ZpbGVzLCBmb3JtYXRGaWxlc30gZnJvbSAnLi9mb3JtYXQnO1xuXG4vKiogQnVpbGQgdGhlIHBhcnNlciBmb3IgdGhlIGZvcm1hdCBjb21tYW5kcy4gKi9cbmV4cG9ydCBmdW5jdGlvbiBidWlsZEZvcm1hdFBhcnNlcihsb2NhbFlhcmdzOiB5YXJncy5Bcmd2KSB7XG4gIHJldHVybiBsb2NhbFlhcmdzXG4gICAgLmhlbHAoKVxuICAgIC5zdHJpY3QoKVxuICAgIC5kZW1hbmRDb21tYW5kKClcbiAgICAub3B0aW9uKCdjaGVjaycsIHtcbiAgICAgIHR5cGU6ICdib29sZWFuJyxcbiAgICAgIGRlZmF1bHQ6IHByb2Nlc3MuZW52WydDSSddID8gdHJ1ZSA6IGZhbHNlLFxuICAgICAgZGVzY3JpcHRpb246ICdSdW4gdGhlIGZvcm1hdHRlciB0byBjaGVjayBmb3JtYXR0aW5nIHJhdGhlciB0aGFuIHVwZGF0aW5nIGNvZGUgZm9ybWF0JyxcbiAgICB9KVxuICAgIC5jb21tYW5kKFxuICAgICAgJ2FsbCcsXG4gICAgICAnUnVuIHRoZSBmb3JtYXR0ZXIgb24gYWxsIGZpbGVzIGluIHRoZSByZXBvc2l0b3J5JyxcbiAgICAgIChhcmdzKSA9PiBhcmdzLFxuICAgICAgKHtjaGVja30pID0+IHtcbiAgICAgICAgY29uc3QgZXhlY3V0aW9uQ21kID0gY2hlY2sgPyBjaGVja0ZpbGVzIDogZm9ybWF0RmlsZXM7XG4gICAgICAgIGNvbnN0IGFsbEZpbGVzID0gR2l0Q2xpZW50LmdldCgpLmFsbEZpbGVzKCk7XG4gICAgICAgIGV4ZWN1dGlvbkNtZChhbGxGaWxlcyk7XG4gICAgICB9LFxuICAgIClcbiAgICAuY29tbWFuZChcbiAgICAgICdjaGFuZ2VkIFtzaGFPclJlZl0nLFxuICAgICAgJ1J1biB0aGUgZm9ybWF0dGVyIG9uIGZpbGVzIGNoYW5nZWQgc2luY2UgdGhlIHByb3ZpZGVkIHNoYS9yZWYnLFxuICAgICAgKGFyZ3MpID0+IGFyZ3MucG9zaXRpb25hbCgnc2hhT3JSZWYnLCB7dHlwZTogJ3N0cmluZyd9KSxcbiAgICAgICh7c2hhT3JSZWYsIGNoZWNrfSkgPT4ge1xuICAgICAgICBjb25zdCBzaGEgPSBzaGFPclJlZiB8fCAnbWFzdGVyJztcbiAgICAgICAgY29uc3QgZXhlY3V0aW9uQ21kID0gY2hlY2sgPyBjaGVja0ZpbGVzIDogZm9ybWF0RmlsZXM7XG4gICAgICAgIGNvbnN0IGFsbENoYW5nZWRGaWxlc1NpbmNlID0gR2l0Q2xpZW50LmdldCgpLmFsbENoYW5nZXNGaWxlc1NpbmNlKHNoYSk7XG4gICAgICAgIGV4ZWN1dGlvbkNtZChhbGxDaGFuZ2VkRmlsZXNTaW5jZSk7XG4gICAgICB9LFxuICAgIClcbiAgICAuY29tbWFuZChcbiAgICAgICdzdGFnZWQnLFxuICAgICAgJ1J1biB0aGUgZm9ybWF0dGVyIG9uIGFsbCBzdGFnZWQgZmlsZXMnLFxuICAgICAgKGFyZ3MpID0+IGFyZ3MsXG4gICAgICAoe2NoZWNrfSkgPT4ge1xuICAgICAgICBjb25zdCBleGVjdXRpb25DbWQgPSBjaGVjayA/IGNoZWNrRmlsZXMgOiBmb3JtYXRGaWxlcztcbiAgICAgICAgY29uc3QgYWxsU3RhZ2VkRmlsZXMgPSBHaXRDbGllbnQuZ2V0KCkuYWxsU3RhZ2VkRmlsZXMoKTtcbiAgICAgICAgZXhlY3V0aW9uQ21kKGFsbFN0YWdlZEZpbGVzKTtcbiAgICAgIH0sXG4gICAgKVxuICAgIC5jb21tYW5kKFxuICAgICAgJ2ZpbGVzIDxmaWxlcy4uPicsXG4gICAgICAnUnVuIHRoZSBmb3JtYXR0ZXIgb24gcHJvdmlkZWQgZmlsZXMnLFxuICAgICAgKGFyZ3MpID0+IGFyZ3MucG9zaXRpb25hbCgnZmlsZXMnLCB7YXJyYXk6IHRydWUsIHR5cGU6ICdzdHJpbmcnfSksXG4gICAgICAoe2NoZWNrLCBmaWxlc30pID0+IHtcbiAgICAgICAgY29uc3QgZXhlY3V0aW9uQ21kID0gY2hlY2sgPyBjaGVja0ZpbGVzIDogZm9ybWF0RmlsZXM7XG4gICAgICAgIGV4ZWN1dGlvbkNtZChmaWxlcyEpO1xuICAgICAgfSxcbiAgICApO1xufVxuIl19